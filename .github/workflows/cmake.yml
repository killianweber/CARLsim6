name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  build_dir: "build"
  config: "Release"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            distro: "ubuntu2004"
            cuda_version: "11.6.2"
            architecture: "x86_64"
            gcc: 10
          #- os: ubuntu-18.04
          #  cuda: "10.1"
          #  gcc: 8

    steps:
    - uses: actions/checkout@v2
    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Install CUDA
      run: |
        cd
        sudo dpkg -i cuda-repo-${{ matrix.distro  }}_${{ matrix.cuda_version  }}_${{ matrix.architecture  }}.deb
        wget https://developer.download.nvidia.com/compute/cuda/repos/${{ matrix.distro  }}/${{ matrix.architecture  }}/cuda-${{ matrix.distro  }}.pin
        sudo mv cuda-${{ matrix.distro  }}.pin /etc/apt/preferences.d/cuda-repository-pin-600
        sudo apt-get update
        sudo apt-get install cuda
        sudo apt-get install nvidia-gds
        sudo reboot
        
    - name: Install CUDA Samples
      run: |
        cd
        git clone https://github.com/NVIDIA/cuda-samples.git
        cd cuda-samples
        make
        cd

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        cd
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        
    - name: Install/Select GTest
      run: |
        cd
        sudo apt-get install libgtest-dev 
        cd /usr/src/gtest
        sudo cmake CMakeLists.txt 
        sudo make 
        sudo cp ./lib/libgtest*.a /usr/lib
        sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a 
        sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
        
    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system

    - name: Build everything else
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`
